//   the problem
/////////////////////////
/*
 * Don't mind the map
==================

After the trauma of Dr. Boolean's lab, the rabbits are eager to get back to their normal lives in a well-connected community, where they can visit each other frequently. Fortunately, the rabbits learned something about engineering as part of their escape from the lab. To get around their new warren fast, they built an elaborate subway system to connect their holes. Each station has the same number of outgoing subway lines (outgoing tracks), which are numbered. 

Unfortunately, sections of warrens are very similar, so they can't tell where they are in the subway system. Their stations have system maps, but not an indicator showing which station the map is in. Needless to say, rabbits get lost in the subway system often. The rabbits adopted an interesting custom to account for this: Whenever they are lost, they take the subway lines in a particular order, and end up at a known station.

For example, say there were three stations A, B, and C, with two outgoing directions, and the stations were connected as follows

Line 1 from A, goes to B. Line 2 from A goes to C.
Line 1 from B, goes to A. Line 2 from B goes to C.
Line 1 from C, goes to B. Line 2 from C goes to A.

Now, suppose you are lost at one of the stations A, B, or C. Independent of where you are, if you take line 2, and then line 1, you always end up at station B. Having a path that takes everyone to the same place is called a meeting path.
We are interested in finding a meeting path which consists of a fixed set of instructions like, 'take line 1, then line 2,' etc. It is possible that you might visit a station multiple times. It is also possible that such a path might not exist. However, subway stations periodically close for maintenance. If a station is closed, then the paths that would normally go to that station, go to the next station in the same direction. As a special case, if the track still goes to the closed station after that rule, then it comes back to the originating station. Closing a station might allow for a meeting path where previously none existed. That is, if you have
A -> B -> C
and station B closes, then you'll have
A -> C
Alternately, if it was
A -> B -> B
then closing station B yields
A -> A

Write a function answer(subway) that returns one of:

-1 (minus one): If there is a meeting path without closing a station
The least index of the station to close that allows for a meeting path or
-2 (minus two): If even with closing 1 station, there is no meeting path.
subway will be a list of lists of integers such that subway[station][direction] = destination_station.

That is, the subway stations are numbered 0, 1, 2, and so on. The k^th element of subway (counting from 0) will give the list of stations directly reachable from station k.

The outgoing lines are numbered 0, 1, 2... The r^th element of the list for station k, gives the number of the station directly reachable by taking line r from station k.

Each element of subway will have the same number of elements (so, each station has the same number of outgoing lines), which will be between 1 and 5.

There will be at least 1 and no more than 50 stations.

For example, if
subway = [[2, 1], [2, 0], [3, 1], [1, 0]]
Then one could take the path [1, 0]. That is, from the starting station, take the second direction, then the first. If the first direction was the red line, and the second was the green line, you could phrase this as:
if you are lost, take the green line for 1 stop, then the red line for 1 stop.
So, consider following the directions starting at each station.
0 -> 1 -> 2.
1 -> 0 -> 2.
2 -> 1 -> 2.
3 -> 0 -> 2.
So, no matter the starting station, the path leads to station 2. Thus, for this subway, answer should return -1.

If
subway = [[1], [0]]
then no matter what path you take, you will always be at a different station than if you started elsewhere. If station 0 closed, that would leave you with
subway = [[0]]
So, in this case, answer would return 0 because there is no meeting path until you close station 0.

To illustrate closing stations,
subway = [[1,1],[2,2],[0,2]]
If station 2 is closed, then
station 1 direction 0 will follow station 2 direction 0 to station 0, which will then be its new destination.
station 1 direction 1 will follow station 2 direction 1 to station 2, but that station is closed, so it will get routed back to station 1, which will be its new destination. This yields
subway = [[1,1],[0,1]]

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int) subway = [[2, 1], [2, 0], [3, 1], [1, 0]]
Output:
    (int) -1

Inputs:
    (int) subway = [[1, 2], [1, 1], [2, 2]]
Output:
    (int) 1
 */

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Stack;

public class Level5Challenge3 { 
	
	/* The main method is used for testing and was not part of the Google challenge submission.
	 * Tests 1, 2, and 3 were given to see if the algorithm works.
	 * Tests 4 and 5 below are exactly as Google gave them, to test the ability of the program
	 * to handle more extensive cases, in which a simple algorithm would take an extremely large
	 * amount of time to solve.
	 */
	
	public static void main(String[] args) {
		int[][] s1 = {{2, 1},{2, 0},{3, 1},{1, 0}};
		int[][] s2 = {{1, 2},{1, 1},{2, 2}};
		int[][] s3 = {{2,3,0},{2,4,1},{0,5,2},{4,0,3},{5,1,4},{3,2,5}};
		int[][] s4 = {{1, 2},{2, 2},{3, 3},{4, 4},{5, 5},{6, 6},{7, 7},{8, 8},{9, 9},{10, 10},{11, 11},{12, 12},
				{13, 13},{14, 14},{15, 15},{16, 16},{17, 17},{18, 18},{19, 19},{20, 20},{21, 21},{22, 22},
				{23, 23},{24, 24},{25, 25},{0, 0}};
		int[][] s5 = {{2,3,0},{2,4,1},{0,5,2},{4,6,3},{5,7,4},{3,8,5},{7,9,6},{8,10,7},{6,11,8},
				{10,12,9},{11,13,10},{9,14,11},{13,15,12},{14,16,13},{12,17,14},{16,18,15},{17,19,16},{15,20,17},
				{19,21,18},{20,22,19},{18,23,20},{22,24,21},{23,25,22},{21,26,23},{25,27,24},{26,28,25},{24,29,26},
				{28,30,27},{29,31,28},{27,32,29},{31,33,30},{32,34,31},{30,35,32},{34,36,33},{35,37,34},{33,38,35},
				{37,39,36},{38,40,37},{36,41,38},{40,42,39},{41,43,40},{39,44,41},{43,45,42},{44,46,43},{42,47,44},
				{46,0,45},{47,1,46},{45,2,47}};

		System.out.println("Test 1. Answer: -1, Response: "+answer(s1));
		System.out.println("Test 2. Answer: 1, Response: "+answer(s2));
		System.out.println("Test 3. Answer: 0, Response: "+answer(s3));
		System.out.println("Test 4. Answer: -1, Response: "+answer(s4));
		System.out.println("Test 5. Answer: 0, Response: "+answer(s5));
	}
	
	// a set of lists of stations that have been tried in recursion already
	static HashSet<ArrayList<Integer>> stationLists;
    
    	// Google required this static method signature.
	public static int answer(int[][] subway) {
        
        	// intialize set of station lists to reference during recursion
		stationLists = new HashSet<ArrayList<Integer>>();
		
		// try without closing stations
		if (hasMeetingPath(subway)) {
			return -1;
		}
		
		// close each station one at a time and check the resulting subway
		for (int i = 0, n = subway.length; i < n; i++) {
		    
		    	// reset station lists for new systems
			stationLists = new HashSet<ArrayList<Integer>>();
			
			if (hasMeetingPath(closeStation(subway, i))) {
				return i;
			}
		}
		
		// nothing worked. no meeting path possible
		return -2;
	}
	
	public static boolean hasMeetingPath(int[][] subway) {
	    
		// try each station as the final meeting place to work backwards from
		for (int i = 0, len = subway.length; i < len; i++) {
		    
		    	// make the initial arraylist containing the first station for recursion
			ArrayList<Integer> pathStations = new ArrayList<Integer>();
			pathStations.add(i);
			if (findStations(subway,pathStations,0,0)) {
				return true;
			}
		}
		return false;
	}
	
	// recursively find stations which run to any of the given path stations using the same line
	public static boolean findStations(int[][] subway, ArrayList<Integer> pathStations, int count, int progress) {
		int len = subway.length, sLen = subway[0].length;
		
		// how to make a new object class without making a new class
		Stack<ArrayList<ArrayList<Integer>>> stack = new Stack<ArrayList<ArrayList<Integer>>>();
		
		// we use a stack to achieve recursion without a stack overflow
		stack.push(makeArray(pathStations,count,progress));
		
		while (!stack.isEmpty()) {
		    
		    	// obtain data from the "object" iteration we are testing
			ArrayList<ArrayList<Integer>> iter = stack.pop();
			pathStations = iter.get(0);
			count = iter.get(1).get(0);
			progress = iter.get(2).get(0);
			
			// if the path contains all stations, it is a meeting path
			if (pathStations.size() == len) {
				return true;
			}
			
			// ensure progress is being made in recursion
			if (++count % len == 0) {
			    	// discard iteration if it contains fewer stations than previous
				if (pathStations.size() <= progress) {
					continue;
				}
				progress = pathStations.size();
			}
		    
		    	// new list of stations to possibly add to stack
			ArrayList<Integer> newStations = new ArrayList<Integer>();
		
			// for each possible line
			for (int j = 0; j < sLen; j++) {  
			    
				// record stations leading to path stations via that line
				for (int i = 0; i < len; i++) {
					if (pathStations.contains(subway[i][j])) {
						newStations.add(i);
					}
				}
				
				// ensure this list of stations hasn't been tried before
				if (!stationLists.contains(newStations)) {
				    
				    	// add to make sure it isn't tried again later
					stationLists.add(newStations);
					
					// only move to the next iteration if the list contains enough stations
					if (newStations.size() >= progress) {
						stack.push(makeArray(newStations,count,progress));
					}
				}
				newStations = new ArrayList<Integer>(); 
			}
		}
		return false;
	}
	
	// make the "object" to add to the stack
	public static ArrayList<ArrayList<Integer>> makeArray(ArrayList<Integer> pathStations, int count, int progress) {
		ArrayList<ArrayList<Integer>> array = new ArrayList<ArrayList<Integer>>();
		
		array.add(pathStations);
		
		ArrayList<Integer> a = new ArrayList<Integer>();
		a.add(count);
		array.add(a);
		
		a = new ArrayList<Integer>();
		a.add(progress);
		array.add(a);
		
		return array;
	}
	
	// return a subway resulting from the closing of a station
	public static int[][] closeStation(int[][] originalSubway, int station) {
	    
	    	// the closed station others will try to go to
		int[] s = originalSubway[station];
		
		int n = originalSubway.length, sLen = s.length;
		int[][] subway = new int[n-1][sLen];
		
		// copy stations before the closed station
		for (int i = 0; i < station; i++) {
			for (int j = 0; j < sLen; j++) {
				subway[i][j] = originalSubway[i][j];
			}
		}

        // copy stations after the closed station
		for (int i = station + 1; i < n; i++) {
			for (int j = 0; j < sLen; j++) {
				subway[i-1][j] = originalSubway[i][j];
			}
		}
		
		// for all stations in the new subway
		for (int i = 0; i < n - 1; i++) {
		    
		    	// for each line at a station
			for (int j = 0; j < sLen; j++) {
			    
			    	// if the line routes to the closed station
				if (subway[i][j] == station) {
				    
				    	// if the closed station routes to itself...
					if (s[j] == station) {
					    
					    	// send the line back to the station it came from
						subway[i][j] = i;
						
						// account for subtraction below
						if (i > station) {
							subway[i][j]++;
						}
					
					// if the closed station does not route to itself
					} else {
					    
					    	// follow the line through the closed station
						subway[i][j] = s[j];
					} 
				} 
				
				// account for there being one less station
				if (subway[i][j] > station) {
					subway[i][j]--;
				}
			}
		}
		return subway;
	}
}
